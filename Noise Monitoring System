"""Capture Audio Input"""

import sounddevice as sd
import numpy as np

def record_audio(duration=10, sample_rate=44100):
    print("Recording...")
    audio_data = sd.rec(int(duration * sample_rate), samplerate=sample_rate, channels=1, dtype='float64')
    sd.wait()
    print("Recording complete.")
    return audio_data

"""Process Audio"""
def calculate_db(audio_data):
    rms = np.sqrt(np.mean(audio_data**2))  # Root Mean Square
    decibel = 20 * np.log10(rms)  # Convert to dB
    return decibel

"""Real-Time Monitoring"""
def monitor_noise(threshold_db=70, duration=10):
    while True:
        audio_data = record_audio(duration=duration)
        noise_level = calculate_db(audio_data)
        print(f"Noise Level: {noise_level:.2f} dB")
        if noise_level > threshold_db:
            print("Alert! Noise level exceeded the threshold.")

"""Data Logging"""
import sqlite3
import time

def log_to_database(noise_level):
    conn = sqlite3.connect('noise_data.db')
    cursor = conn.cursor()
    cursor.execute("CREATE TABLE IF NOT EXISTS noise_log (timestamp TEXT, noise_level REAL)")
    timestamp = time.strftime('%Y-%m-%d %H:%M:%S')
    cursor.execute("INSERT INTO noise_log (timestamp, noise_level) VALUES (?, ?)", (timestamp, noise_level))
    conn.commit()
    conn.close()

"""Visualization"""
import matplotlib.pyplot as plt

def visualize_noise(noise_levels):
    plt.plot(noise_levels)
    plt.title('Real-Time Noise Levels')
    plt.xlabel('Time')
    plt.ylabel('Noise Level (dB)')
    plt.show()

